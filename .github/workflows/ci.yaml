name: opencoverage

on: [push]

jobs:

  # Job to run pre-checks
  pre-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version=1.1.4
          source $HOME/.poetry/env
          make install-dev
      - name: Run pre-checks
        run: |
          source $HOME/.poetry/env
          make lint
          make mypy
  # Job to run tests
  tests-api:
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    strategy:
      matrix:
        python-version: [3.8]
        database: ["postgres"]

    # Set environment variables
    env:
      DSN: "postgresql://postgres:postgres@localhost:5432/postgres?sslmode=disable"
      SCM: github
      GITHUB_APP_PEM_FILE: "cov.pem"
      GITHUB_APP_ID: "97375"
      GITHUB_DEFAULT_INSTALLATION_ID: "14245515"

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the package
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version=1.1.4
          source $HOME/.poetry/env
          make install-dev

      - name: Copy github api pem
        run: 'echo "$COV_PEM" > cov.pem'
        shell: bash
        env:
          COV_PEM: ${{secrets.COV_PEM}}

      - name: Run tests
        run: |
          source $HOME/.poetry/env
          make coverage

      - name: Upload coverage to Open Coverage
        run: |
          source $HOME/.poetry/env
          poetry run codecov --url="https://open-coverage.org/api" --token=- --slug=vangheem/opencoverage --file=coverage.xml -F project:api
  
  tests-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - run: npm install -g yarn
        working-directory: ./app
      - run: yarn install
        working-directory: ./app
      - run: yarn coverage > coverage.lcov
        working-directory: ./app
      # don't report now, not serious about it as it's so little
      # - run: yarn report-coverage
      #   working-directory: ./app
      

  build-docker-api:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - tests-api
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        run: echo "VERSION=$(awk '/^version =/{gsub(/"/,"",$3);print $3}' pyproject.toml)" >> $GITHUB_ENV

      - name: Build docker for API
        run: |
          docker build . -t opencoverage/api:$VERSION
          docker tag opencoverage/api:$VERSION opencoverage/api:latest
          docker push opencoverage/api:$VERSION
          docker push opencoverage/api:latest

  build-docker-frontend:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - tests-frontend
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get version
        run: echo "VERSION=$(awk '/^version =/{gsub(/"/,"",$3);print $3}' pyproject.toml)" >> $GITHUB_ENV

      - name: Build docker for Frontend
        run: |
          cd app
          docker build . -t opencoverage/frontend:$VERSION
          docker tag opencoverage/frontend:$VERSION opencoverage/frontend:latest
          docker push opencoverage/frontend:$VERSION
          docker push opencoverage/frontend:latest
